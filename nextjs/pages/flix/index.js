import { useState } from 'react';
import Head from 'next/head';
import Link from 'next/link';
import Image from 'next/image';
import cx from 'classnames';
import DeveloperHint from '../../components/DeveloperHint';
import styles from '../../styles/Home.module.css';

export default function Home({ genres, shows, showsByGenre }) {
  const [selectedGenre, setSelectedGenre] = useState();

  function renderPoster(key) {
    return (
      <Link key={key} href={`/flix/${shows[key].content._path_part}`}>
        <a>
          <img
            width={220}
            height={160}
            src={shows[key].content.poster.data[0].url}
          />
        </a>
      </Link>
    );
  }

  return (
    <div className={styles.container}>
      <Head>
        <title>ZFLIX</title>
        <meta name='description' content='Generated by create next app' />
        <link rel='icon' href='/favicon.ico' />
      </Head>

      <main className={styles.main}>
        <h1 className={styles.title}>
          <img src='https://4q6k83l9.media.zestyio.com/zflix-light.png' />
        </h1>
        <div className={styles.genres}>
          <div
            className={cx(styles.genre, !selectedGenre ? styles.active : null)}
            onClick={() => setSelectedGenre()}
          >
            All
          </div>
          {Object.keys(genres).map((key) => {
            return (
              <div
                key={key}
                className={cx(
                  styles.genre,
                  selectedGenre === key ? styles.active : null
                )}
                onClick={() => setSelectedGenre(key)}
              >
                {genres[key].content.genre_name}
              </div>
            );
          })}
        </div>
        <div className={styles.shows}>
          {!selectedGenre
            ? // Show All Movies/Shows
              Object.keys(shows).map(renderPoster)
            : // Show Shows by selected Genre
              showsByGenre[selectedGenre] &&
              showsByGenre[selectedGenre].map(renderPoster)}
        </div>
      </main>

      <DeveloperHint>
        <p>
          <strong>Zesty.io Hint:</strong> This is an example using the Zesty
          Instant API. The react component in NextJS, uses the getStaticProps()
          function to call two separate content model endpoints. It uses a{' '}
          <a href='https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/all'>
            Promise.all
          </a>{' '}
          chain to fetch the data from Zesty's WebEngine{' '}
          <a href='https://www.zflix.net/-/instant/6-f0cec18fde-1sv709.json'>
            Flix content model
          </a>{' '}
          and{' '}
          <a href='https://www.zflix.net/-/instant/6-84a583c9a0-vg55wj.json'>
            Genres content model
          </a>
          . It then uses{' '}
          <a href='https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/Reduce'>
            array.reduce
          </a>{' '}
          to normalize the data into lookup table keyed by ZUID.
        </p>
      </DeveloperHint>
    </div>
  );
}

export async function getStaticProps() {
  const [genres, shows] = await Promise.all([
    fetch('https://www.zflix.net/-/instant/6-84a583c9a0-vg55wj.json')
      .then((res) => res.json())
      .then((genres) =>
        // Genres lookup table with zuid keys
        genres.data.reduce((obj, genre) => {
          obj[genre.meta.zuid] = genre;
          return obj;
        }, {})
      ),
    fetch('https://www.zflix.net/-/instant/6-f0cec18fde-1sv709.json')
      .then((res) => res.json())
      .then((shows) =>
        // Shows lookup table with zuid keys
        shows.data.reduce((obj, show) => {
          // Only include shows with a poster
          if (show.content.poster) {
            obj[show.meta.zuid] = show;
          }
          return obj;
        }, {})
      ),
  ]);

  // shows lookup table with genre zuid keys, values are array of show zuids
  const showsByGenre = Object.keys(shows).reduce((obj, key) => {
    const show = shows[key];
    show.content.genres.data.forEach((genre) => {
      if (!obj[genre.zuid]) {
        obj[genre.zuid] = [];
      } else {
        obj[genre.zuid].push(key);
      }
    });
    return obj;
  }, {});

  return {
    props: {
      genres,
      shows,
      showsByGenre,
    },
  };
}
